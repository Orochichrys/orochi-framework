document.addEventListener('DOMContentLoaded', () => {
  const e = document.querySelector('.o-navbar-toggler'),
    t = document.querySelector('.o-navbar-toggler-icon');
  t && (t.innerHTML = '<i class="oi oi-menu"></i>'),
    document.querySelectorAll('.o-dropdown > .o-nav-link').forEach((e) => {
      e.textContent.includes('▾') ||
        e.textContent.includes('▴') ||
        (e.textContent += ' ▾');
      const t = () => {
        e.textContent = e.textContent.includes('▾')
          ? e.textContent.replace('▾', '▴')
          : e.textContent.replace('▴', '▾');
      };
      ['click', 'mouseover', 'mouseout'].forEach((o) =>
        e.addEventListener(o, t)
      );
    }),
    e &&
      e.addEventListener('click', () => {
        const e = document.querySelector('.o-navbar-nav-wrapper');
        if (!e || !t) return;
        const o = e.classList.contains('o-navbar-nav-wrapper-active');
        e.classList.toggle('o-navbar-nav-wrapper-active'),
          (t.innerHTML = o
            ? '<i class="oi oi-menu"></i>'
            : '<i class="oi oi-close"></i>');
      });
});
const observerOptions = { threshold: 0.1, rootMargin: '0px 0px -50px 0px' },
  observerCallback = (e, t) => {
    e.forEach((e) => {
      e.isIntersecting &&
        (e.target.classList.add('o-visible'), t.unobserve(e.target));
    });
  },
  observer = new IntersectionObserver(observerCallback, observerOptions),
  animationClasses = [
    '.o-card-scroll-animate',
    '.o-fade-animate',
    '.o-slide-left',
    '.o-slide-right',
    '.o-slide-down',
    '.o-zoom-animate',
    '.o-zoom-out-animate',
    '.o-rotate-animate',
    '.o-rotate-left',
    '.o-rotate-right',
    '.o-flip-x',
    '.o-flip-y',
    '.o-bounce-animate',
    '.o-swing-animate',
    '.o-unfold-animate',
    '.o-slide-diagonal-tl',
    '.o-slide-diagonal-tr',
    '.o-slide-diagonal-bl',
    '.o-slide-diagonal-br',
  ];
function resetAnimations() {
  document.querySelectorAll(animationClasses.join(', ')).forEach((e) => {
    e.classList.remove('o-visible'), observer.observe(e);
  });
}
function triggerAnimation(e) {
  e && !e.classList.contains('o-visible') && e.classList.add('o-visible');
}
document.querySelectorAll(animationClasses.join(', ')).forEach((e) => {
  observer.observe(e);
});
class OrochiModal {
  constructor() {
    (this.modals = []), this.init();
  }
  init() {
    document.querySelectorAll('[data-o-modal-target]').forEach((e) => {
      const t = e.dataset.orochiModalTarget,
        o = document.querySelector(t);
      o &&
        (this.modals.push(o), e.addEventListener('click', () => this.open(o)));
    }),
      document.querySelectorAll('[data-o-modal-close]').forEach((e) => {
        e.addEventListener('click', () => this.close(e.closest('.o-modal')));
      }),
      document.addEventListener('click', (e) => {
        e.target.classList.contains('o-modal') && this.close(e.target);
      }),
      document.addEventListener('keydown', (e) => {
        'Escape' === e.key && this.closeAll();
      });
  }
  open(e) {
    this.closeAll(), e.setAttribute('aria-hidden', 'false'), this.trapFocus(e);
  }
  close(e) {
    e.setAttribute('aria-hidden', 'true'), this.releaseFocus();
  }
  closeAll() {
    this.modals.forEach((e) => this.close(e));
  }
  trapFocus(e) {
    const t = e.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    t.length && t[0].focus();
  }
  releaseFocus() {
    const e = document.querySelector(
      '[data-o-modal-target][aria-expanded="true"]'
    );
    e && e.focus();
  }
}
document.addEventListener('DOMContentLoaded', () => new OrochiModal());
